{"version":3,"sources":["../src/index.js"],"names":["defaultHtml","KEYS","globalJsdom","html","options","global","navigator","userAgent","includes","document","destroy","url","Object","assign","jsdom","JSDOM","window","length","push","getOwnPropertyNames","filter","k","startsWith","forEach","key","console","$jsdom","cleanup"],"mappings":";;;;;;;AAGA;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,8EAApB;AAIA,IAAMC,IAAI,GAAG,EAAb;;AAEe,SAASC,WAAT,GAAuD;AAAA,MAAlCC,IAAkC,uEAA3BH,WAA2B;AAAA,MAAdI,OAAc,uEAAJ,EAAI;;AAEpE,MAAIC,MAAM,CAACC,SAAP,IACCD,MAAM,CAACC,SAAP,CAAiBC,SADlB,IAECF,MAAM,CAACC,SAAP,CAAiBC,SAAjB,CAA2BC,QAA3B,CAAoC,SAApC,CAFD,IAGCH,MAAM,CAACI,QAHR,IAIC,OAAOJ,MAAM,CAACI,QAAP,CAAgBC,OAAvB,KAAmC,UAJxC,EAIoD;AAClD,WAAOL,MAAM,CAACI,QAAP,CAAgBC,OAAvB;AACD;;AAGD,MAAI,CAACN,OAAO,CAACO,GAAb,EAAkB;AAAEC,IAAAA,MAAM,CAACC,MAAP,CAAcT,OAAd,EAAuB;AAAEO,MAAAA,GAAG,EAAE;AAAP,KAAvB;AAA0D;;AAE9E,MAAMG,KAAK,GAAG,IAAIC,YAAJ,CAAUZ,IAAV,EAAgBC,OAAhB,CAAd;AAboE,MAc5DY,MAd4D,GAcjDF,KAdiD,CAc5DE,MAd4D;AAAA,MAe5DP,QAf4D,GAe/CO,MAf+C,CAe5DP,QAf4D;;AAqBpE,MAAIR,IAAI,CAACgB,MAAL,KAAgB,CAApB,EAAuB;AACrBhB,IAAAA,IAAI,CAACiB,IAAL,OAAAjB,IAAI,qBAASW,MAAM,CAACO,mBAAP,CAA2BH,MAA3B,EAAmCI,MAAnC,CAA0C,UAACC,CAAD;AAAA,aAAO,CAACA,CAAC,CAACC,UAAF,CAAa,GAAb,CAAR;AAAA,KAA1C,EAAqEF,MAArE,CAA4E,UAACC,CAAD;AAAA,aAAO,EAAEA,CAAC,IAAIhB,MAAP,CAAP;AAAA,KAA5E,CAAT,EAAJ;AAEAJ,IAAAA,IAAI,CAACiB,IAAL,CAAU,QAAV;AACD;;AAEDjB,EAAAA,IAAI,CAACsB,OAAL,CAAa,UAACC,GAAD;AAAA,WAASnB,MAAM,CAACmB,GAAD,CAAN,GAAcR,MAAM,CAACQ,GAAD,CAA7B;AAAA,GAAb;AAGAnB,EAAAA,MAAM,CAACI,QAAP,GAAkBA,QAAlB;AACAJ,EAAAA,MAAM,CAACW,MAAP,GAAgBA,MAAhB;AACAA,EAAAA,MAAM,CAACS,OAAP,GAAiBpB,MAAM,CAACoB,OAAxB;AAGApB,EAAAA,MAAM,CAACqB,MAAP,GAAgBZ,KAAhB;;AAEA,MAAMa,OAAO,GAAG,SAAVA,OAAU;AAAA,WAAM1B,IAAI,CAACsB,OAAL,CAAa,UAACC,GAAD;AAAA,aAAS,OAAOnB,MAAM,CAACmB,GAAD,CAAtB;AAAA,KAAb,CAAN;AAAA,GAAhB;;AAEAf,EAAAA,QAAQ,CAACC,OAAT,GAAmBiB,OAAnB;AAEA,SAAOA,OAAP;AACD","sourcesContent":["/*\n * enables jsdom globally.\n */\nimport { JSDOM } from 'jsdom'\n\nconst defaultHtml = '<!doctype html><html><head><meta charset=\"utf-8\"></head><body></body></html>'\n\n// define this here so that we only ever dynamically populate KEYS once . this\n// way\nconst KEYS = []\n\nexport default function globalJsdom(html = defaultHtml, options = {}) {\n  // Idempotency\n  if (global.navigator\n    && global.navigator.userAgent\n    && global.navigator.userAgent.includes('Node.js')\n    && global.document\n    && typeof global.document.destroy === 'function') {\n    return global.document.destroy\n  }\n\n  // set a default url if we don't get one - otherwise things explode when we copy localstorage keys\n  if (!options.url) { Object.assign(options, { url: 'http://localhost:3000' }) }\n\n  const jsdom = new JSDOM(html, options)\n  const { window } = jsdom\n  const { document } = window\n\n  // generate our list of keys by enumerating document.window - this list may vary\n  // based on the jsdom version. filter out internal methods as well as anything\n  // that node already defines\n\n  if (KEYS.length === 0) {\n    KEYS.push(...Object.getOwnPropertyNames(window).filter((k) => !k.startsWith('_')).filter((k) => !(k in global)))\n    // going to add our jsdom instance, see below\n    KEYS.push('$jsdom')\n  }\n  // eslint-disable-next-line no-return-assign\n  KEYS.forEach((key) => global[key] = window[key])\n\n  // setup document / window / window.console\n  global.document = document\n  global.window = window\n  window.console = global.console\n\n  // add access to our jsdom instance\n  global.$jsdom = jsdom\n\n  const cleanup = () => KEYS.forEach((key) => delete global[key])\n\n  document.destroy = cleanup\n\n  return cleanup\n}\n"],"file":"index.js"}